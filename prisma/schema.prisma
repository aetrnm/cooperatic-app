generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  groups    Group[]
  members   Member[]
  channels  Channel[]
}

model Group {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String    @db.Text
  inviteCode String    @unique
  profileId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]

  @@index([profileId])
}

model Member {
  id                     String          @id @default(uuid())
  role                   MemberRole      @default(USER)
  profileId              String
  groupId                String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  group                  Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages               Message[]
  directMessages         DirectMessage[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")

  @@index([profileId])
  @@index([groupId])
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  groupId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  group     Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([profileId])
  @@index([groupId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberTwoId    String
  memberOne      Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String       @db.Text
  fileUrl        String?      @db.Text
  memberId       String
  conversationId String
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  USER
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}
